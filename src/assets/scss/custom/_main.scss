$circle-width: 0.08em;
$circle-width-hover: 0.04em;
// mixins

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin rotate($rotation) {
  -webkit-transform: rotate($rotation);
  -moz-transform: rotate($rotation);
  -ms-transform: rotate($rotation);
  -o-transform: rotate($rotation);
  transform: rotate($rotation);
}

@mixin box-sizing($box-sizing) {
  -webkit-box-sizing: $box-sizing;
  -moz-box-sizing: $box-sizing;
  box-sizing: $box-sizing;
}

@mixin transition-property($transition) {
  -webkit-transition-property: $transition;
  -moz-transition-property: $transition;
  -o-transition-property: $transition;
  transition-property: $transition;
}

@mixin transition-duration($duration) {
  -webkit-transition-duration: $duration;
  -moz-transition-duration: $duration;
  -o-transition-duration: $duration;
  transition-duration: $duration;
}

@mixin transition-timing-function($timing) {
  -webkit-transition-timing-function: $timing;
  -moz-transition-timing-function: $timing;
  -o-transition-timing-function: $timing;
  transition-timing-function: $timing;
}

//yup
.rect-auto {
  clip: rect(auto, auto, auto, auto);
}

.pie {
  position: absolute;
  border: $circle-width solid rgba(var($primary), 1);
  width: 1 - (2 * $circle-width);
  height: 1 - (2 * $circle-width);
  clip: rect(0em, 0.5em, 1em, 0em);
  border-radius: 50%;
  @include rotate(0deg);
}

.pie-fill {
  @include rotate(180deg);
}

// main
.c100 {
  *,
  *:before,
  *:after {
    @include box-sizing(content-box);
  }

  position: relative;
  font-size: 120px;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  float: left;
  margin: 0 0.1em 0.1em 0;
  background-color: rgba(var($light), 1);

  // center circle to its parent
  &.center {
    float: none;
    margin: 0 auto;
  }

  // bigger size
  &.big {
    font-size: 240px;
  }

  // smaller size
  &.small {
    font-size: 80px;
  }

  // centered value inside circle
  > span {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
    left: 0;
    top: 35%;
    line-height: 1.2em;
    font-size: 0.12em;
    display: block;
    text-align: center;
    @include transition-property(all);
    @include transition-duration(0.2s);
    @include transition-timing-function(ease-out);
  }

  // background inside the circle
  &:after {
    position: absolute;
    top: $circle-width;
    left: $circle-width;
    display: block;
    content: " ";
    border-radius: 50%;
    background-color: rgba(var($warning), 0.1);
    width: 1 - (2 * $circle-width);
    height: 1 - (2 * $circle-width);
    @include transition-property(all);
    @include transition-duration(0.2s);
    @include transition-timing-function(ease-in);
  }

  // the slice (mask)
  .slice {
    position: absolute;
    width: 1em;
    height: 1em;
    clip: rect(0em, 1em, 1em, 0.5em);
  }

  // circle to show the status
  .bar {
    @extend .pie;
  }

  // loop to create all needed elements automatically
  @for $i from 51 through 100 {
    &.p#{$i} {
      & .slice {
        @extend .rect-auto;
      }

      &.bar:after {
        @extend .pie-fill;
      }

      & .fill {
        @extend .pie;
        @extend .pie-fill;
      }
    }
  }

  // loop to rotate all 100 circles
  @for $i from 1 through 100 {
    &.p#{$i} .bar {
      $degs: calc(360 / 100 * $i);
      @include rotate(#{$degs}deg);
    }
  }

  // hover styles
  &:hover {
    cursor: default;

    > span {
      font-weight: bold;
      color: rgba(var($primary), 1);
    }

    &:after {
      top: $circle-width-hover;
      left: $circle-width-hover;
      width: 1 - (2 * $circle-width-hover);
      height: 1 - (2 * $circle-width-hover);
    }
  }

  &.grantext {
    > span {
      font-size: 0.22em;
    }
  }

  &.green {
    .bar,
    .fill {
      border-color: rgba(var(--vs-success), 1) !important;
    }

    &:hover {
      > span {
        color: rgba(var($warning), 1);
      }
    }
  }

  &.orange {
    .bar,
    .fill {
      border-color: rgba(var($warning), 1) !important;
    }

    &:hover {
      > span {
        color: rgba(var($primary), 1);
      }
    }
  }
}
